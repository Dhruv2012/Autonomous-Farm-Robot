// Generated by gencpp from file marti_common_msgs/ServiceHeader.msg
// DO NOT EDIT!


#ifndef MARTI_COMMON_MSGS_MESSAGE_SERVICEHEADER_H
#define MARTI_COMMON_MSGS_MESSAGE_SERVICEHEADER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace marti_common_msgs
{
template <class ContainerAllocator>
struct ServiceHeader_
{
  typedef ServiceHeader_<ContainerAllocator> Type;

  ServiceHeader_()
    : stamp()
    , sequence(0)
    , sender()
    , result(false)  {
    }
  ServiceHeader_(const ContainerAllocator& _alloc)
    : stamp()
    , sequence(0)
    , sender(_alloc)
    , result(false)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef uint32_t _sequence_type;
  _sequence_type sequence;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sender_type;
  _sender_type sender;

   typedef uint8_t _result_type;
  _result_type result;





  typedef boost::shared_ptr< ::marti_common_msgs::ServiceHeader_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marti_common_msgs::ServiceHeader_<ContainerAllocator> const> ConstPtr;

}; // struct ServiceHeader_

typedef ::marti_common_msgs::ServiceHeader_<std::allocator<void> > ServiceHeader;

typedef boost::shared_ptr< ::marti_common_msgs::ServiceHeader > ServiceHeaderPtr;
typedef boost::shared_ptr< ::marti_common_msgs::ServiceHeader const> ServiceHeaderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marti_common_msgs::ServiceHeader_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marti_common_msgs::ServiceHeader_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marti_common_msgs::ServiceHeader_<ContainerAllocator1> & lhs, const ::marti_common_msgs::ServiceHeader_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.sequence == rhs.sequence &&
    lhs.sender == rhs.sender &&
    lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marti_common_msgs::ServiceHeader_<ContainerAllocator1> & lhs, const ::marti_common_msgs::ServiceHeader_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marti_common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::marti_common_msgs::ServiceHeader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marti_common_msgs::ServiceHeader_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_common_msgs::ServiceHeader_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_common_msgs::ServiceHeader_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_common_msgs::ServiceHeader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_common_msgs::ServiceHeader_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marti_common_msgs::ServiceHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c9ecea07422007ad3a23c820ab38111a";
  }

  static const char* value(const ::marti_common_msgs::ServiceHeader_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc9ecea07422007adULL;
  static const uint64_t static_value2 = 0x3a23c820ab38111aULL;
};

template<class ContainerAllocator>
struct DataType< ::marti_common_msgs::ServiceHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marti_common_msgs/ServiceHeader";
  }

  static const char* value(const ::marti_common_msgs::ServiceHeader_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marti_common_msgs::ServiceHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message contains all of the data filled in automatically by the service system\n"
"# It is required in each request and response message to be named srv_header\n"
"time stamp\n"
"uint32 sequence\n"
"string sender\n"
"bool result # Used to indicate if the service request was successful or not\n"
;
  }

  static const char* value(const ::marti_common_msgs::ServiceHeader_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marti_common_msgs::ServiceHeader_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.sequence);
      stream.next(m.sender);
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ServiceHeader_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marti_common_msgs::ServiceHeader_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marti_common_msgs::ServiceHeader_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "sequence: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sequence);
    s << indent << "sender: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sender);
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARTI_COMMON_MSGS_MESSAGE_SERVICEHEADER_H
