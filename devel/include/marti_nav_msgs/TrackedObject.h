// Generated by gencpp from file marti_nav_msgs/TrackedObject.msg
// DO NOT EDIT!


#ifndef MARTI_NAV_MSGS_MESSAGE_TRACKEDOBJECT_H
#define MARTI_NAV_MSGS_MESSAGE_TRACKEDOBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/PoseWithCovariance.h>
#include <geometry_msgs/TwistWithCovariance.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Point.h>

namespace marti_nav_msgs
{
template <class ContainerAllocator>
struct TrackedObject_
{
  typedef TrackedObject_<ContainerAllocator> Type;

  TrackedObject_()
    : header()
    , id(0)
    , pose()
    , velocity()
    , linear_acceleration()
    , linear_acceleration_covariance()
    , polygon()
    , length(0.0)
    , length_quality(0.0)
    , width(0.0)
    , width_quality(0.0)
    , classification(0)
    , classification_quality(0.0)
    , existence_probability(0.0)
    , age_duration()
    , prediction_duration()
    , active(false)  {
      linear_acceleration_covariance.assign(0.0);
  }
  TrackedObject_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(0)
    , pose(_alloc)
    , velocity(_alloc)
    , linear_acceleration(_alloc)
    , linear_acceleration_covariance()
    , polygon(_alloc)
    , length(0.0)
    , length_quality(0.0)
    , width(0.0)
    , width_quality(0.0)
    , classification(0)
    , classification_quality(0.0)
    , existence_probability(0.0)
    , age_duration()
    , prediction_duration()
    , active(false)  {
  (void)_alloc;
      linear_acceleration_covariance.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _id_type;
  _id_type id;

   typedef  ::geometry_msgs::PoseWithCovariance_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::TwistWithCovariance_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;

   typedef boost::array<double, 9>  _linear_acceleration_covariance_type;
  _linear_acceleration_covariance_type linear_acceleration_covariance;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _polygon_type;
  _polygon_type polygon;

   typedef float _length_type;
  _length_type length;

   typedef float _length_quality_type;
  _length_quality_type length_quality;

   typedef float _width_type;
  _width_type width;

   typedef float _width_quality_type;
  _width_quality_type width_quality;

   typedef uint8_t _classification_type;
  _classification_type classification;

   typedef float _classification_quality_type;
  _classification_quality_type classification_quality;

   typedef float _existence_probability_type;
  _existence_probability_type existence_probability;

   typedef ros::Duration _age_duration_type;
  _age_duration_type age_duration;

   typedef ros::Duration _prediction_duration_type;
  _prediction_duration_type prediction_duration;

   typedef uint8_t _active_type;
  _active_type active;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(VEHICLE)
  #undef VEHICLE
#endif
#if defined(_WIN32) && defined(PEDESTRIAN)
  #undef PEDESTRIAN
#endif
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif

  enum {
    VEHICLE = 0u,
    PEDESTRIAN = 1u,
    UNKNOWN = 255u,
  };


  typedef boost::shared_ptr< ::marti_nav_msgs::TrackedObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marti_nav_msgs::TrackedObject_<ContainerAllocator> const> ConstPtr;

}; // struct TrackedObject_

typedef ::marti_nav_msgs::TrackedObject_<std::allocator<void> > TrackedObject;

typedef boost::shared_ptr< ::marti_nav_msgs::TrackedObject > TrackedObjectPtr;
typedef boost::shared_ptr< ::marti_nav_msgs::TrackedObject const> TrackedObjectConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marti_nav_msgs::TrackedObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marti_nav_msgs::TrackedObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marti_nav_msgs::TrackedObject_<ContainerAllocator1> & lhs, const ::marti_nav_msgs::TrackedObject_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.id == rhs.id &&
    lhs.pose == rhs.pose &&
    lhs.velocity == rhs.velocity &&
    lhs.linear_acceleration == rhs.linear_acceleration &&
    lhs.linear_acceleration_covariance == rhs.linear_acceleration_covariance &&
    lhs.polygon == rhs.polygon &&
    lhs.length == rhs.length &&
    lhs.length_quality == rhs.length_quality &&
    lhs.width == rhs.width &&
    lhs.width_quality == rhs.width_quality &&
    lhs.classification == rhs.classification &&
    lhs.classification_quality == rhs.classification_quality &&
    lhs.existence_probability == rhs.existence_probability &&
    lhs.age_duration == rhs.age_duration &&
    lhs.prediction_duration == rhs.prediction_duration &&
    lhs.active == rhs.active;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marti_nav_msgs::TrackedObject_<ContainerAllocator1> & lhs, const ::marti_nav_msgs::TrackedObject_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marti_nav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::marti_nav_msgs::TrackedObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marti_nav_msgs::TrackedObject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_nav_msgs::TrackedObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_nav_msgs::TrackedObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_nav_msgs::TrackedObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_nav_msgs::TrackedObject_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marti_nav_msgs::TrackedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cbb29999f8b089f4f41612b25a8b7540";
  }

  static const char* value(const ::marti_nav_msgs::TrackedObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcbb29999f8b089f4ULL;
  static const uint64_t static_value2 = 0xf41612b25a8b7540ULL;
};

template<class ContainerAllocator>
struct DataType< ::marti_nav_msgs::TrackedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marti_nav_msgs/TrackedObject";
  }

  static const char* value(const ::marti_nav_msgs::TrackedObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marti_nav_msgs::TrackedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 VEHICLE=0\n"
"uint8 PEDESTRIAN=1\n"
"uint8 UNKNOWN=255\n"
"\n"
"Header header  # Frame and timestamp\n"
"uint16 id      # Id\n"
"\n"
"geometry_msgs/PoseWithCovariance pose      # Pose in the header frame.\n"
"geometry_msgs/TwistWithCovariance velocity # Velocity in the header frame.\n"
"geometry_msgs/Vector3 linear_acceleration  # Acceleration in the header frame.\n"
"float64[9] linear_acceleration_covariance  # Row major x, y z\n"
"\n"
"geometry_msgs/Point[] polygon\n"
"# A list of points that define the obstacle's geometry in horizontal\n"
"# plane relative to the obstacle's pose.  The polygon is implicitly\n"
"# closed by a segment between the last and first points.\n"
"\n"
"# Estimated oriented bounding box for object classes with rectangular shapes.\n"
"float32 length                 # Length of the object in meters\n"
"float32 length_quality         # Length quality number [0,1]\n"
"float32 width                  # Width of the object in meters\n"
"float32 width_quality          # Width quality number [0,1]\n"
"\n"
"uint8 classification           # Classification\n"
"float32 classification_quality # Classification quality number [0,1]\n"
"\n"
"float32 existence_probability  # Existence probability [0,1]\n"
"\n"
"duration age_duration          # Age of the track since first detection.\n"
"duration prediction_duration   # Age of the prediction since the active flag was last true.\n"
"\n"
"bool active                    # Active flag for if the objects is currently being detected.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistWithCovariance\n"
"# This expresses velocity in free space with uncertainty.\n"
"\n"
"Twist twist\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::marti_nav_msgs::TrackedObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marti_nav_msgs::TrackedObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.pose);
      stream.next(m.velocity);
      stream.next(m.linear_acceleration);
      stream.next(m.linear_acceleration_covariance);
      stream.next(m.polygon);
      stream.next(m.length);
      stream.next(m.length_quality);
      stream.next(m.width);
      stream.next(m.width_quality);
      stream.next(m.classification);
      stream.next(m.classification_quality);
      stream.next(m.existence_probability);
      stream.next(m.age_duration);
      stream.next(m.prediction_duration);
      stream.next(m.active);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackedObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marti_nav_msgs::TrackedObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marti_nav_msgs::TrackedObject_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::TwistWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "linear_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration);
    s << indent << "linear_acceleration_covariance[]" << std::endl;
    for (size_t i = 0; i < v.linear_acceleration_covariance.size(); ++i)
    {
      s << indent << "  linear_acceleration_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.linear_acceleration_covariance[i]);
    }
    s << indent << "polygon[]" << std::endl;
    for (size_t i = 0; i < v.polygon.size(); ++i)
    {
      s << indent << "  polygon[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.polygon[i]);
    }
    s << indent << "length: ";
    Printer<float>::stream(s, indent + "  ", v.length);
    s << indent << "length_quality: ";
    Printer<float>::stream(s, indent + "  ", v.length_quality);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "width_quality: ";
    Printer<float>::stream(s, indent + "  ", v.width_quality);
    s << indent << "classification: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.classification);
    s << indent << "classification_quality: ";
    Printer<float>::stream(s, indent + "  ", v.classification_quality);
    s << indent << "existence_probability: ";
    Printer<float>::stream(s, indent + "  ", v.existence_probability);
    s << indent << "age_duration: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.age_duration);
    s << indent << "prediction_duration: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.prediction_duration);
    s << indent << "active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.active);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARTI_NAV_MSGS_MESSAGE_TRACKEDOBJECT_H
