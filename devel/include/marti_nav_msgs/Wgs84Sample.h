// Generated by gencpp from file marti_nav_msgs/Wgs84Sample.msg
// DO NOT EDIT!


#ifndef MARTI_NAV_MSGS_MESSAGE_WGS84SAMPLE_H
#define MARTI_NAV_MSGS_MESSAGE_WGS84SAMPLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace marti_nav_msgs
{
template <class ContainerAllocator>
struct Wgs84Sample_
{
  typedef Wgs84Sample_<ContainerAllocator> Type;

  Wgs84Sample_()
    : header()
    , odom()
    , wgs84()
    , wgs84_covariance()  {
      wgs84_covariance.assign(0.0);
  }
  Wgs84Sample_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , odom(_alloc)
    , wgs84(_alloc)
    , wgs84_covariance()  {
  (void)_alloc;
      wgs84_covariance.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _odom_type;
  _odom_type odom;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _wgs84_type;
  _wgs84_type wgs84;

   typedef boost::array<double, 9>  _wgs84_covariance_type;
  _wgs84_covariance_type wgs84_covariance;





  typedef boost::shared_ptr< ::marti_nav_msgs::Wgs84Sample_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marti_nav_msgs::Wgs84Sample_<ContainerAllocator> const> ConstPtr;

}; // struct Wgs84Sample_

typedef ::marti_nav_msgs::Wgs84Sample_<std::allocator<void> > Wgs84Sample;

typedef boost::shared_ptr< ::marti_nav_msgs::Wgs84Sample > Wgs84SamplePtr;
typedef boost::shared_ptr< ::marti_nav_msgs::Wgs84Sample const> Wgs84SampleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marti_nav_msgs::Wgs84Sample_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marti_nav_msgs::Wgs84Sample_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marti_nav_msgs::Wgs84Sample_<ContainerAllocator1> & lhs, const ::marti_nav_msgs::Wgs84Sample_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.odom == rhs.odom &&
    lhs.wgs84 == rhs.wgs84 &&
    lhs.wgs84_covariance == rhs.wgs84_covariance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marti_nav_msgs::Wgs84Sample_<ContainerAllocator1> & lhs, const ::marti_nav_msgs::Wgs84Sample_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marti_nav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::marti_nav_msgs::Wgs84Sample_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marti_nav_msgs::Wgs84Sample_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_nav_msgs::Wgs84Sample_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_nav_msgs::Wgs84Sample_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_nav_msgs::Wgs84Sample_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_nav_msgs::Wgs84Sample_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marti_nav_msgs::Wgs84Sample_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5241cb1ac52fc7a58f710c9a9774badc";
  }

  static const char* value(const ::marti_nav_msgs::Wgs84Sample_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5241cb1ac52fc7a5ULL;
  static const uint64_t static_value2 = 0x8f710c9a9774badcULL;
};

template<class ContainerAllocator>
struct DataType< ::marti_nav_msgs::Wgs84Sample_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marti_nav_msgs/Wgs84Sample";
  }

  static const char* value(const ::marti_nav_msgs::Wgs84Sample_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marti_nav_msgs::Wgs84Sample_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message contains an absolute position measurement (in\n"
"# spherical/WGS-84 coordinates) and the corresponding sensor\n"
"# (e.g. antenna) location in a vehicle's relative odometry coordinate\n"
"# frame.\n"
"\n"
"Header header\n"
"# The header contains the /tf name of the relative odometry frame and\n"
"# the timestamp of the measurement.\n"
"\n"
"geometry_msgs/Point odom\n"
"# The position of the sample in the relative odometry frame.\n"
"\n"
"geometry_msgs/Point wgs84\n"
"# The WGS84 measurement (x = longitude in decimal degrees, y =\n"
"# latitude in decimal degrees, z = altitude over the reference\n"
"# ellipsoid in meters)\n"
"\n"
"float64[9] wgs84_covariance\n"
"# An estimate of WGS-84 measurement's covariance.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::marti_nav_msgs::Wgs84Sample_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marti_nav_msgs::Wgs84Sample_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.odom);
      stream.next(m.wgs84);
      stream.next(m.wgs84_covariance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Wgs84Sample_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marti_nav_msgs::Wgs84Sample_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marti_nav_msgs::Wgs84Sample_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "odom: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.odom);
    s << indent << "wgs84: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.wgs84);
    s << indent << "wgs84_covariance[]" << std::endl;
    for (size_t i = 0; i < v.wgs84_covariance.size(); ++i)
    {
      s << indent << "  wgs84_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.wgs84_covariance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARTI_NAV_MSGS_MESSAGE_WGS84SAMPLE_H
