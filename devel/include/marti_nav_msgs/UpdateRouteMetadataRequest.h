// Generated by gencpp from file marti_nav_msgs/UpdateRouteMetadataRequest.msg
// DO NOT EDIT!


#ifndef MARTI_NAV_MSGS_MESSAGE_UPDATEROUTEMETADATAREQUEST_H
#define MARTI_NAV_MSGS_MESSAGE_UPDATEROUTEMETADATAREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <marti_nav_msgs/RoutePoint.h>

namespace marti_nav_msgs
{
template <class ContainerAllocator>
struct UpdateRouteMetadataRequest_
{
  typedef UpdateRouteMetadataRequest_<ContainerAllocator> Type;

  UpdateRouteMetadataRequest_()
    : route_guid()
    , metadata_points()  {
    }
  UpdateRouteMetadataRequest_(const ContainerAllocator& _alloc)
    : route_guid(_alloc)
    , metadata_points(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _route_guid_type;
  _route_guid_type route_guid;

   typedef std::vector< ::marti_nav_msgs::RoutePoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::marti_nav_msgs::RoutePoint_<ContainerAllocator> >::other >  _metadata_points_type;
  _metadata_points_type metadata_points;





  typedef boost::shared_ptr< ::marti_nav_msgs::UpdateRouteMetadataRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marti_nav_msgs::UpdateRouteMetadataRequest_<ContainerAllocator> const> ConstPtr;

}; // struct UpdateRouteMetadataRequest_

typedef ::marti_nav_msgs::UpdateRouteMetadataRequest_<std::allocator<void> > UpdateRouteMetadataRequest;

typedef boost::shared_ptr< ::marti_nav_msgs::UpdateRouteMetadataRequest > UpdateRouteMetadataRequestPtr;
typedef boost::shared_ptr< ::marti_nav_msgs::UpdateRouteMetadataRequest const> UpdateRouteMetadataRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marti_nav_msgs::UpdateRouteMetadataRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marti_nav_msgs::UpdateRouteMetadataRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marti_nav_msgs::UpdateRouteMetadataRequest_<ContainerAllocator1> & lhs, const ::marti_nav_msgs::UpdateRouteMetadataRequest_<ContainerAllocator2> & rhs)
{
  return lhs.route_guid == rhs.route_guid &&
    lhs.metadata_points == rhs.metadata_points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marti_nav_msgs::UpdateRouteMetadataRequest_<ContainerAllocator1> & lhs, const ::marti_nav_msgs::UpdateRouteMetadataRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marti_nav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::marti_nav_msgs::UpdateRouteMetadataRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marti_nav_msgs::UpdateRouteMetadataRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_nav_msgs::UpdateRouteMetadataRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_nav_msgs::UpdateRouteMetadataRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_nav_msgs::UpdateRouteMetadataRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_nav_msgs::UpdateRouteMetadataRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marti_nav_msgs::UpdateRouteMetadataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4326dd3985865ba6412643260ac9da6f";
  }

  static const char* value(const ::marti_nav_msgs::UpdateRouteMetadataRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4326dd3985865ba6ULL;
  static const uint64_t static_value2 = 0x412643260ac9da6fULL;
};

template<class ContainerAllocator>
struct DataType< ::marti_nav_msgs::UpdateRouteMetadataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marti_nav_msgs/UpdateRouteMetadataRequest";
  }

  static const char* value(const ::marti_nav_msgs::UpdateRouteMetadataRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marti_nav_msgs::UpdateRouteMetadataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"string route_guid\n"
"marti_nav_msgs/RoutePoint[] metadata_points\n"
"\n"
"================================================================================\n"
"MSG: marti_nav_msgs/RoutePoint\n"
"geometry_msgs/Pose           pose\n"
"string                       id         # unique identifier for this point\n"
"marti_common_msgs/KeyValue[] properties\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: marti_common_msgs/KeyValue\n"
"# An arbitrary key-value pair\n"
"\n"
"string key\n"
"string value\n"
;
  }

  static const char* value(const ::marti_nav_msgs::UpdateRouteMetadataRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marti_nav_msgs::UpdateRouteMetadataRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.route_guid);
      stream.next(m.metadata_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UpdateRouteMetadataRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marti_nav_msgs::UpdateRouteMetadataRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marti_nav_msgs::UpdateRouteMetadataRequest_<ContainerAllocator>& v)
  {
    s << indent << "route_guid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.route_guid);
    s << indent << "metadata_points[]" << std::endl;
    for (size_t i = 0; i < v.metadata_points.size(); ++i)
    {
      s << indent << "  metadata_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::marti_nav_msgs::RoutePoint_<ContainerAllocator> >::stream(s, indent + "    ", v.metadata_points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARTI_NAV_MSGS_MESSAGE_UPDATEROUTEMETADATAREQUEST_H
