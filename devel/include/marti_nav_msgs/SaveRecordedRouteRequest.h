// Generated by gencpp from file marti_nav_msgs/SaveRecordedRouteRequest.msg
// DO NOT EDIT!


#ifndef MARTI_NAV_MSGS_MESSAGE_SAVERECORDEDROUTEREQUEST_H
#define MARTI_NAV_MSGS_MESSAGE_SAVERECORDEDROUTEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace marti_nav_msgs
{
template <class ContainerAllocator>
struct SaveRecordedRouteRequest_
{
  typedef SaveRecordedRouteRequest_<ContainerAllocator> Type;

  SaveRecordedRouteRequest_()
    : name()
    , thumbnail()  {
    }
  SaveRecordedRouteRequest_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , thumbnail(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _thumbnail_type;
  _thumbnail_type thumbnail;





  typedef boost::shared_ptr< ::marti_nav_msgs::SaveRecordedRouteRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marti_nav_msgs::SaveRecordedRouteRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SaveRecordedRouteRequest_

typedef ::marti_nav_msgs::SaveRecordedRouteRequest_<std::allocator<void> > SaveRecordedRouteRequest;

typedef boost::shared_ptr< ::marti_nav_msgs::SaveRecordedRouteRequest > SaveRecordedRouteRequestPtr;
typedef boost::shared_ptr< ::marti_nav_msgs::SaveRecordedRouteRequest const> SaveRecordedRouteRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marti_nav_msgs::SaveRecordedRouteRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marti_nav_msgs::SaveRecordedRouteRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marti_nav_msgs::SaveRecordedRouteRequest_<ContainerAllocator1> & lhs, const ::marti_nav_msgs::SaveRecordedRouteRequest_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.thumbnail == rhs.thumbnail;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marti_nav_msgs::SaveRecordedRouteRequest_<ContainerAllocator1> & lhs, const ::marti_nav_msgs::SaveRecordedRouteRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marti_nav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::marti_nav_msgs::SaveRecordedRouteRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marti_nav_msgs::SaveRecordedRouteRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_nav_msgs::SaveRecordedRouteRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_nav_msgs::SaveRecordedRouteRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_nav_msgs::SaveRecordedRouteRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_nav_msgs::SaveRecordedRouteRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marti_nav_msgs::SaveRecordedRouteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0fbcf26e6340aaedd12defe956e94dc7";
  }

  static const char* value(const ::marti_nav_msgs::SaveRecordedRouteRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0fbcf26e6340aaedULL;
  static const uint64_t static_value2 = 0xd12defe956e94dc7ULL;
};

template<class ContainerAllocator>
struct DataType< ::marti_nav_msgs::SaveRecordedRouteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marti_nav_msgs/SaveRecordedRouteRequest";
  }

  static const char* value(const ::marti_nav_msgs::SaveRecordedRouteRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marti_nav_msgs::SaveRecordedRouteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"string thumbnail\n"
"\n"
;
  }

  static const char* value(const ::marti_nav_msgs::SaveRecordedRouteRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marti_nav_msgs::SaveRecordedRouteRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.thumbnail);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SaveRecordedRouteRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marti_nav_msgs::SaveRecordedRouteRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marti_nav_msgs::SaveRecordedRouteRequest_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "thumbnail: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.thumbnail);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARTI_NAV_MSGS_MESSAGE_SAVERECORDEDROUTEREQUEST_H
