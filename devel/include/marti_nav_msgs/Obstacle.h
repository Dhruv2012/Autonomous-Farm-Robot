// Generated by gencpp from file marti_nav_msgs/Obstacle.msg
// DO NOT EDIT!


#ifndef MARTI_NAV_MSGS_MESSAGE_OBSTACLE_H
#define MARTI_NAV_MSGS_MESSAGE_OBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Point.h>

namespace marti_nav_msgs
{
template <class ContainerAllocator>
struct Obstacle_
{
  typedef Obstacle_<ContainerAllocator> Type;

  Obstacle_()
    : id()
    , pose()
    , polygon()  {
    }
  Obstacle_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , pose(_alloc)
    , polygon(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _polygon_type;
  _polygon_type polygon;





  typedef boost::shared_ptr< ::marti_nav_msgs::Obstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marti_nav_msgs::Obstacle_<ContainerAllocator> const> ConstPtr;

}; // struct Obstacle_

typedef ::marti_nav_msgs::Obstacle_<std::allocator<void> > Obstacle;

typedef boost::shared_ptr< ::marti_nav_msgs::Obstacle > ObstaclePtr;
typedef boost::shared_ptr< ::marti_nav_msgs::Obstacle const> ObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marti_nav_msgs::Obstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marti_nav_msgs::Obstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marti_nav_msgs::Obstacle_<ContainerAllocator1> & lhs, const ::marti_nav_msgs::Obstacle_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.pose == rhs.pose &&
    lhs.polygon == rhs.polygon;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marti_nav_msgs::Obstacle_<ContainerAllocator1> & lhs, const ::marti_nav_msgs::Obstacle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marti_nav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::marti_nav_msgs::Obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marti_nav_msgs::Obstacle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_nav_msgs::Obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_nav_msgs::Obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_nav_msgs::Obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_nav_msgs::Obstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marti_nav_msgs::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6379634b2f186de37a480e1f3f9b2e7f";
  }

  static const char* value(const ::marti_nav_msgs::Obstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6379634b2f186de3ULL;
  static const uint64_t static_value2 = 0x7a480e1f3f9b2e7fULL;
};

template<class ContainerAllocator>
struct DataType< ::marti_nav_msgs::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marti_nav_msgs/Obstacle";
  }

  static const char* value(const ::marti_nav_msgs::Obstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marti_nav_msgs::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"# Unique id for the obstacle or empty if not used.\n"
"\n"
"geometry_msgs/Pose pose\n"
"# The pose of the origin of the obstacle.\n"
"\n"
"geometry_msgs/Point[] polygon\n"
"# A list of points that define the obstacle's geometry in horizontal\n"
"# plane relative to the obstacle's pose.  The polygon is implicitly\n"
"# closed by a segment between the last and first points.\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::marti_nav_msgs::Obstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marti_nav_msgs::Obstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.pose);
      stream.next(m.polygon);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Obstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marti_nav_msgs::Obstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marti_nav_msgs::Obstacle_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "polygon[]" << std::endl;
    for (size_t i = 0; i < v.polygon.size(); ++i)
    {
      s << indent << "  polygon[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.polygon[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARTI_NAV_MSGS_MESSAGE_OBSTACLE_H
