// Generated by gencpp from file marti_nav_msgs/GetRouteRequest.msg
// DO NOT EDIT!


#ifndef MARTI_NAV_MSGS_MESSAGE_GETROUTEREQUEST_H
#define MARTI_NAV_MSGS_MESSAGE_GETROUTEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace marti_nav_msgs
{
template <class ContainerAllocator>
struct GetRouteRequest_
{
  typedef GetRouteRequest_<ContainerAllocator> Type;

  GetRouteRequest_()
    : guid()  {
    }
  GetRouteRequest_(const ContainerAllocator& _alloc)
    : guid(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _guid_type;
  _guid_type guid;





  typedef boost::shared_ptr< ::marti_nav_msgs::GetRouteRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marti_nav_msgs::GetRouteRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetRouteRequest_

typedef ::marti_nav_msgs::GetRouteRequest_<std::allocator<void> > GetRouteRequest;

typedef boost::shared_ptr< ::marti_nav_msgs::GetRouteRequest > GetRouteRequestPtr;
typedef boost::shared_ptr< ::marti_nav_msgs::GetRouteRequest const> GetRouteRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marti_nav_msgs::GetRouteRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marti_nav_msgs::GetRouteRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marti_nav_msgs::GetRouteRequest_<ContainerAllocator1> & lhs, const ::marti_nav_msgs::GetRouteRequest_<ContainerAllocator2> & rhs)
{
  return lhs.guid == rhs.guid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marti_nav_msgs::GetRouteRequest_<ContainerAllocator1> & lhs, const ::marti_nav_msgs::GetRouteRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marti_nav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::marti_nav_msgs::GetRouteRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marti_nav_msgs::GetRouteRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_nav_msgs::GetRouteRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_nav_msgs::GetRouteRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_nav_msgs::GetRouteRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_nav_msgs::GetRouteRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marti_nav_msgs::GetRouteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1cfe9d879d6e044ada83c3105996467b";
  }

  static const char* value(const ::marti_nav_msgs::GetRouteRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1cfe9d879d6e044aULL;
  static const uint64_t static_value2 = 0xda83c3105996467bULL;
};

template<class ContainerAllocator>
struct DataType< ::marti_nav_msgs::GetRouteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marti_nav_msgs/GetRouteRequest";
  }

  static const char* value(const ::marti_nav_msgs::GetRouteRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marti_nav_msgs::GetRouteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"\n"
"string guid\n"
"\n"
;
  }

  static const char* value(const ::marti_nav_msgs::GetRouteRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marti_nav_msgs::GetRouteRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.guid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetRouteRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marti_nav_msgs::GetRouteRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marti_nav_msgs::GetRouteRequest_<ContainerAllocator>& v)
  {
    s << indent << "guid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.guid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARTI_NAV_MSGS_MESSAGE_GETROUTEREQUEST_H
