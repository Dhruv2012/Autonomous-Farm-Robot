// Generated by gencpp from file marti_nav_msgs/RouteOffset.msg
// DO NOT EDIT!


#ifndef MARTI_NAV_MSGS_MESSAGE_ROUTEOFFSET_H
#define MARTI_NAV_MSGS_MESSAGE_ROUTEOFFSET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <marti_nav_msgs/RoutePosition.h>

namespace marti_nav_msgs
{
template <class ContainerAllocator>
struct RouteOffset_
{
  typedef RouteOffset_<ContainerAllocator> Type;

  RouteOffset_()
    : header()
    , relative_pose()
    , route_position()  {
    }
  RouteOffset_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , relative_pose(_alloc)
    , route_position(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _relative_pose_type;
  _relative_pose_type relative_pose;

   typedef  ::marti_nav_msgs::RoutePosition_<ContainerAllocator>  _route_position_type;
  _route_position_type route_position;





  typedef boost::shared_ptr< ::marti_nav_msgs::RouteOffset_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marti_nav_msgs::RouteOffset_<ContainerAllocator> const> ConstPtr;

}; // struct RouteOffset_

typedef ::marti_nav_msgs::RouteOffset_<std::allocator<void> > RouteOffset;

typedef boost::shared_ptr< ::marti_nav_msgs::RouteOffset > RouteOffsetPtr;
typedef boost::shared_ptr< ::marti_nav_msgs::RouteOffset const> RouteOffsetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marti_nav_msgs::RouteOffset_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marti_nav_msgs::RouteOffset_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marti_nav_msgs::RouteOffset_<ContainerAllocator1> & lhs, const ::marti_nav_msgs::RouteOffset_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.relative_pose == rhs.relative_pose &&
    lhs.route_position == rhs.route_position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marti_nav_msgs::RouteOffset_<ContainerAllocator1> & lhs, const ::marti_nav_msgs::RouteOffset_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marti_nav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::marti_nav_msgs::RouteOffset_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marti_nav_msgs::RouteOffset_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_nav_msgs::RouteOffset_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_nav_msgs::RouteOffset_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_nav_msgs::RouteOffset_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_nav_msgs::RouteOffset_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marti_nav_msgs::RouteOffset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "69208bbf68ef432cb1b3530d6fdda6cf";
  }

  static const char* value(const ::marti_nav_msgs::RouteOffset_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x69208bbf68ef432cULL;
  static const uint64_t static_value2 = 0xb1b3530d6fdda6cfULL;
};

template<class ContainerAllocator>
struct DataType< ::marti_nav_msgs::RouteOffset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marti_nav_msgs/RouteOffset";
  }

  static const char* value(const ::marti_nav_msgs::RouteOffset_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marti_nav_msgs::RouteOffset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Gives a position and orientation relative to a position on a route\n"
"\n"
"Header header                                 # only stamp used\n"
"\n"
"geometry_msgs/Pose relative_pose              # pose relative to position on route\n"
"marti_nav_msgs/RoutePosition route_position   # position on route\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: marti_nav_msgs/RoutePosition\n"
"# Position along route\n"
"\n"
"Header  header   # only stamp used\n"
"string  route_id # unique ID of the corresponding route\n"
"string  id       # unique ID of nearest point\n"
"float32 distance # forward along route, in meters from point identified by id\n"
"                 # field (negative values indicate the distance is backward\n"
"                 # along the route)\n"
;
  }

  static const char* value(const ::marti_nav_msgs::RouteOffset_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marti_nav_msgs::RouteOffset_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.relative_pose);
      stream.next(m.route_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RouteOffset_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marti_nav_msgs::RouteOffset_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marti_nav_msgs::RouteOffset_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "relative_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.relative_pose);
    s << indent << "route_position: ";
    s << std::endl;
    Printer< ::marti_nav_msgs::RoutePosition_<ContainerAllocator> >::stream(s, indent + "  ", v.route_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARTI_NAV_MSGS_MESSAGE_ROUTEOFFSET_H
