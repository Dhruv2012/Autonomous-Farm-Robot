// Generated by gencpp from file marti_sensor_msgs/DifferentialMeasurement.msg
// DO NOT EDIT!


#ifndef MARTI_SENSOR_MSGS_MESSAGE_DIFFERENTIALMEASUREMENT_H
#define MARTI_SENSOR_MSGS_MESSAGE_DIFFERENTIALMEASUREMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>

namespace marti_sensor_msgs
{
template <class ContainerAllocator>
struct DifferentialMeasurement_
{
  typedef DifferentialMeasurement_<ContainerAllocator> Type;

  DifferentialMeasurement_()
    : header()
    , base_frame_id()
    , baseline_length(0.0)
    , baseline_length_variance(0.0)
    , heading(0.0)
    , heading_variance(0.0)
    , pitch(0.0)
    , pitch_variance(0.0)
    , roll(0.0)
    , roll_variance(0.0)
    , position()
    , position_covariance()  {
      position_covariance.assign(0.0);
  }
  DifferentialMeasurement_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , base_frame_id(_alloc)
    , baseline_length(0.0)
    , baseline_length_variance(0.0)
    , heading(0.0)
    , heading_variance(0.0)
    , pitch(0.0)
    , pitch_variance(0.0)
    , roll(0.0)
    , roll_variance(0.0)
    , position(_alloc)
    , position_covariance()  {
  (void)_alloc;
      position_covariance.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _base_frame_id_type;
  _base_frame_id_type base_frame_id;

   typedef double _baseline_length_type;
  _baseline_length_type baseline_length;

   typedef double _baseline_length_variance_type;
  _baseline_length_variance_type baseline_length_variance;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _heading_variance_type;
  _heading_variance_type heading_variance;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _pitch_variance_type;
  _pitch_variance_type pitch_variance;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _roll_variance_type;
  _roll_variance_type roll_variance;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef boost::array<double, 9>  _position_covariance_type;
  _position_covariance_type position_covariance;





  typedef boost::shared_ptr< ::marti_sensor_msgs::DifferentialMeasurement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marti_sensor_msgs::DifferentialMeasurement_<ContainerAllocator> const> ConstPtr;

}; // struct DifferentialMeasurement_

typedef ::marti_sensor_msgs::DifferentialMeasurement_<std::allocator<void> > DifferentialMeasurement;

typedef boost::shared_ptr< ::marti_sensor_msgs::DifferentialMeasurement > DifferentialMeasurementPtr;
typedef boost::shared_ptr< ::marti_sensor_msgs::DifferentialMeasurement const> DifferentialMeasurementConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marti_sensor_msgs::DifferentialMeasurement_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marti_sensor_msgs::DifferentialMeasurement_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marti_sensor_msgs::DifferentialMeasurement_<ContainerAllocator1> & lhs, const ::marti_sensor_msgs::DifferentialMeasurement_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.base_frame_id == rhs.base_frame_id &&
    lhs.baseline_length == rhs.baseline_length &&
    lhs.baseline_length_variance == rhs.baseline_length_variance &&
    lhs.heading == rhs.heading &&
    lhs.heading_variance == rhs.heading_variance &&
    lhs.pitch == rhs.pitch &&
    lhs.pitch_variance == rhs.pitch_variance &&
    lhs.roll == rhs.roll &&
    lhs.roll_variance == rhs.roll_variance &&
    lhs.position == rhs.position &&
    lhs.position_covariance == rhs.position_covariance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marti_sensor_msgs::DifferentialMeasurement_<ContainerAllocator1> & lhs, const ::marti_sensor_msgs::DifferentialMeasurement_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marti_sensor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::marti_sensor_msgs::DifferentialMeasurement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marti_sensor_msgs::DifferentialMeasurement_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_sensor_msgs::DifferentialMeasurement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_sensor_msgs::DifferentialMeasurement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_sensor_msgs::DifferentialMeasurement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_sensor_msgs::DifferentialMeasurement_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marti_sensor_msgs::DifferentialMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e59a00b1eeea864eec73f05dd359752";
  }

  static const char* value(const ::marti_sensor_msgs::DifferentialMeasurement_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e59a00b1eeea864ULL;
  static const uint64_t static_value2 = 0xeec73f05dd359752ULL;
};

template<class ContainerAllocator>
struct DataType< ::marti_sensor_msgs::DifferentialMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marti_sensor_msgs/DifferentialMeasurement";
  }

  static const char* value(const ::marti_sensor_msgs::DifferentialMeasurement_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marti_sensor_msgs::DifferentialMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A differential measurement between two places in the world\n"
"#  Usually used with RTK-gps setups\n"
"\n"
"Header  header           # The time and location where this measurement is taken from\n"
"string  base_frame_id    # The location we are measuring relative to\n"
"\n"
"float64 baseline_length  # Distance in meters between the two locations\n"
"float64 baseline_length_variance # set > 1e14 to mark as invalid\n"
"float64 heading          # Heading in degrees of the relative position vector\n"
"float64 heading_variance # set > 1e14 to mark as invalid\n"
"float64 pitch            # Pitch in degrees of the relative position vector\n"
"float64 pitch_variance   # set > 1e14 to mark as invalid\n"
"float64 roll             # Roll in degrees of the relative position vector\n"
"float64 roll_variance    # set > 1e14 to mark as invalid\n"
"\n"
"geometry_msgs/Vector3 position  # position measurement between this point and our reference location\n"
"                                # coordinates are given in ENU meters\n"
"float64[9] position_covariance  # Covariance for the position measurement\n"
"                       # set > 1e14 to mark as invalid\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::marti_sensor_msgs::DifferentialMeasurement_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marti_sensor_msgs::DifferentialMeasurement_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.base_frame_id);
      stream.next(m.baseline_length);
      stream.next(m.baseline_length_variance);
      stream.next(m.heading);
      stream.next(m.heading_variance);
      stream.next(m.pitch);
      stream.next(m.pitch_variance);
      stream.next(m.roll);
      stream.next(m.roll_variance);
      stream.next(m.position);
      stream.next(m.position_covariance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DifferentialMeasurement_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marti_sensor_msgs::DifferentialMeasurement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marti_sensor_msgs::DifferentialMeasurement_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "base_frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.base_frame_id);
    s << indent << "baseline_length: ";
    Printer<double>::stream(s, indent + "  ", v.baseline_length);
    s << indent << "baseline_length_variance: ";
    Printer<double>::stream(s, indent + "  ", v.baseline_length_variance);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "heading_variance: ";
    Printer<double>::stream(s, indent + "  ", v.heading_variance);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "pitch_variance: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_variance);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "roll_variance: ";
    Printer<double>::stream(s, indent + "  ", v.roll_variance);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "position_covariance[]" << std::endl;
    for (size_t i = 0; i < v.position_covariance.size(); ++i)
    {
      s << indent << "  position_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position_covariance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARTI_SENSOR_MSGS_MESSAGE_DIFFERENTIALMEASUREMENT_H
