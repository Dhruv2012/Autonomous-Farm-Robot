// Generated by gencpp from file marti_sensor_msgs/Direction.msg
// DO NOT EDIT!


#ifndef MARTI_SENSOR_MSGS_MESSAGE_DIRECTION_H
#define MARTI_SENSOR_MSGS_MESSAGE_DIRECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace marti_sensor_msgs
{
template <class ContainerAllocator>
struct Direction_
{
  typedef Direction_<ContainerAllocator> Type;

  Direction_()
    : header()
    , direction(0)  {
    }
  Direction_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , direction(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _direction_type;
  _direction_type direction;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(BACKWARD)
  #undef BACKWARD
#endif
#if defined(_WIN32) && defined(ZERO)
  #undef ZERO
#endif
#if defined(_WIN32) && defined(FORWARD)
  #undef FORWARD
#endif
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif

  enum {
    BACKWARD = -1,
    ZERO = 0,
    FORWARD = 1,
    UNKNOWN = 127,
  };


  typedef boost::shared_ptr< ::marti_sensor_msgs::Direction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marti_sensor_msgs::Direction_<ContainerAllocator> const> ConstPtr;

}; // struct Direction_

typedef ::marti_sensor_msgs::Direction_<std::allocator<void> > Direction;

typedef boost::shared_ptr< ::marti_sensor_msgs::Direction > DirectionPtr;
typedef boost::shared_ptr< ::marti_sensor_msgs::Direction const> DirectionConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marti_sensor_msgs::Direction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marti_sensor_msgs::Direction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marti_sensor_msgs::Direction_<ContainerAllocator1> & lhs, const ::marti_sensor_msgs::Direction_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.direction == rhs.direction;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marti_sensor_msgs::Direction_<ContainerAllocator1> & lhs, const ::marti_sensor_msgs::Direction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marti_sensor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::marti_sensor_msgs::Direction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marti_sensor_msgs::Direction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_sensor_msgs::Direction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_sensor_msgs::Direction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_sensor_msgs::Direction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_sensor_msgs::Direction_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marti_sensor_msgs::Direction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f4fcbfc7e6f35aa53be850d25834349c";
  }

  static const char* value(const ::marti_sensor_msgs::Direction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf4fcbfc7e6f35aa5ULL;
  static const uint64_t static_value2 = 0x3be850d25834349cULL;
};

template<class ContainerAllocator>
struct DataType< ::marti_sensor_msgs::Direction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marti_sensor_msgs/Direction";
  }

  static const char* value(const ::marti_sensor_msgs::Direction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marti_sensor_msgs::Direction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Direction of vehicle motion\n"
"#\n"
"# When combined with an unsigned speed, this message can be used to determine\n"
"# signed vehicle speed\n"
"\n"
"Header  header           # The time and location of the measurement.\n"
"                         # The x-axis in the sensor space is interpreted as the\n"
"                         # axis of linear motion.\n"
"\n"
"int8 BACKWARD=-1\n"
"int8 ZERO=0\n"
"int8 FORWARD=1\n"
"int8 UNKNOWN=127         # Indicates either unknown motion or motion that isn't clear if it is forwards\n"
"                         # or backwards such as turning in place\n"
"\n"
"int8 direction           # The direction of motion. Positive is forward, negative is\n"
"                         # backward, and 0 is stopped.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::marti_sensor_msgs::Direction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marti_sensor_msgs::Direction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.direction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Direction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marti_sensor_msgs::Direction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marti_sensor_msgs::Direction_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "direction: ";
    Printer<int8_t>::stream(s, indent + "  ", v.direction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARTI_SENSOR_MSGS_MESSAGE_DIRECTION_H
