// Generated by gencpp from file marti_sensor_msgs/DioRealTimeData.msg
// DO NOT EDIT!


#ifndef MARTI_SENSOR_MSGS_MESSAGE_DIOREALTIMEDATA_H
#define MARTI_SENSOR_MSGS_MESSAGE_DIOREALTIMEDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace marti_sensor_msgs
{
template <class ContainerAllocator>
struct DioRealTimeData_
{
  typedef DioRealTimeData_<ContainerAllocator> Type;

  DioRealTimeData_()
    : header()
    , sample_frequency(0.0)
    , latest_sample_time(0)
    , sample_states()
    , sample_times()  {
    }
  DioRealTimeData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sample_frequency(0.0)
    , latest_sample_time(0)
    , sample_states(_alloc)
    , sample_times(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _sample_frequency_type;
  _sample_frequency_type sample_frequency;

   typedef uint64_t _latest_sample_time_type;
  _latest_sample_time_type latest_sample_time;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _sample_states_type;
  _sample_states_type sample_states;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _sample_times_type;
  _sample_times_type sample_times;





  typedef boost::shared_ptr< ::marti_sensor_msgs::DioRealTimeData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marti_sensor_msgs::DioRealTimeData_<ContainerAllocator> const> ConstPtr;

}; // struct DioRealTimeData_

typedef ::marti_sensor_msgs::DioRealTimeData_<std::allocator<void> > DioRealTimeData;

typedef boost::shared_ptr< ::marti_sensor_msgs::DioRealTimeData > DioRealTimeDataPtr;
typedef boost::shared_ptr< ::marti_sensor_msgs::DioRealTimeData const> DioRealTimeDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marti_sensor_msgs::DioRealTimeData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marti_sensor_msgs::DioRealTimeData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marti_sensor_msgs::DioRealTimeData_<ContainerAllocator1> & lhs, const ::marti_sensor_msgs::DioRealTimeData_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.sample_frequency == rhs.sample_frequency &&
    lhs.latest_sample_time == rhs.latest_sample_time &&
    lhs.sample_states == rhs.sample_states &&
    lhs.sample_times == rhs.sample_times;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marti_sensor_msgs::DioRealTimeData_<ContainerAllocator1> & lhs, const ::marti_sensor_msgs::DioRealTimeData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marti_sensor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::marti_sensor_msgs::DioRealTimeData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marti_sensor_msgs::DioRealTimeData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_sensor_msgs::DioRealTimeData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_sensor_msgs::DioRealTimeData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_sensor_msgs::DioRealTimeData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_sensor_msgs::DioRealTimeData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marti_sensor_msgs::DioRealTimeData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "98eef69989f7d8b60307368e8e339ff4";
  }

  static const char* value(const ::marti_sensor_msgs::DioRealTimeData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x98eef69989f7d8b6ULL;
  static const uint64_t static_value2 = 0x0307368e8e339ff4ULL;
};

template<class ContainerAllocator>
struct DataType< ::marti_sensor_msgs::DioRealTimeData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marti_sensor_msgs/DioRealTimeData";
  }

  static const char* value(const ::marti_sensor_msgs::DioRealTimeData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marti_sensor_msgs::DioRealTimeData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message for containing digital data obtained by a real-time DAQ.\n"
"\n"
"Header header\n"
"# header contains the timestamp of when this data was obtained from\n"
"# the device.\n"
"\n"
"float64 sample_frequency\n"
"# The sampling frequency [Hz] of the DAQ.\n"
"\n"
"uint64 latest_sample_time\n"
"# The most recent time (in sampling clock ticks) that the port was\n"
"# sampled.\n"
"\n"
"uint16[] sample_states\n"
"uint32[] sample_times\n"
"# DAQ data filtered to only contain changes in states.  sample_times[]\n"
"# is a list of clock ticks encoded as a (negative) offset from\n"
"# latest_sample_time (ex: clock_time[i] = latest_sample_time -\n"
"# sample_times[i]).  This encoding reduces the times from uint64 to\n"
"# uint32.  sample_states[] are the port states at the corresponding\n"
"# times.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::marti_sensor_msgs::DioRealTimeData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marti_sensor_msgs::DioRealTimeData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sample_frequency);
      stream.next(m.latest_sample_time);
      stream.next(m.sample_states);
      stream.next(m.sample_times);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DioRealTimeData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marti_sensor_msgs::DioRealTimeData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marti_sensor_msgs::DioRealTimeData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sample_frequency: ";
    Printer<double>::stream(s, indent + "  ", v.sample_frequency);
    s << indent << "latest_sample_time: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.latest_sample_time);
    s << indent << "sample_states[]" << std::endl;
    for (size_t i = 0; i < v.sample_states.size(); ++i)
    {
      s << indent << "  sample_states[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.sample_states[i]);
    }
    s << indent << "sample_times[]" << std::endl;
    for (size_t i = 0; i < v.sample_times.size(); ++i)
    {
      s << indent << "  sample_times[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.sample_times[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARTI_SENSOR_MSGS_MESSAGE_DIOREALTIMEDATA_H
