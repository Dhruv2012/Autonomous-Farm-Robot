// Generated by gencpp from file mapviz/AddMapvizDisplayRequest.msg
// DO NOT EDIT!


#ifndef MAPVIZ_MESSAGE_ADDMAPVIZDISPLAYREQUEST_H
#define MAPVIZ_MESSAGE_ADDMAPVIZDISPLAYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <marti_common_msgs/KeyValue.h>

namespace mapviz
{
template <class ContainerAllocator>
struct AddMapvizDisplayRequest_
{
  typedef AddMapvizDisplayRequest_<ContainerAllocator> Type;

  AddMapvizDisplayRequest_()
    : name()
    , type()
    , draw_order(0)
    , visible(false)
    , properties()  {
    }
  AddMapvizDisplayRequest_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , type(_alloc)
    , draw_order(0)
    , visible(false)
    , properties(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef int32_t _draw_order_type;
  _draw_order_type draw_order;

   typedef uint8_t _visible_type;
  _visible_type visible;

   typedef std::vector< ::marti_common_msgs::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::marti_common_msgs::KeyValue_<ContainerAllocator> >::other >  _properties_type;
  _properties_type properties;





  typedef boost::shared_ptr< ::mapviz::AddMapvizDisplayRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mapviz::AddMapvizDisplayRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AddMapvizDisplayRequest_

typedef ::mapviz::AddMapvizDisplayRequest_<std::allocator<void> > AddMapvizDisplayRequest;

typedef boost::shared_ptr< ::mapviz::AddMapvizDisplayRequest > AddMapvizDisplayRequestPtr;
typedef boost::shared_ptr< ::mapviz::AddMapvizDisplayRequest const> AddMapvizDisplayRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mapviz::AddMapvizDisplayRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mapviz::AddMapvizDisplayRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mapviz::AddMapvizDisplayRequest_<ContainerAllocator1> & lhs, const ::mapviz::AddMapvizDisplayRequest_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.type == rhs.type &&
    lhs.draw_order == rhs.draw_order &&
    lhs.visible == rhs.visible &&
    lhs.properties == rhs.properties;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mapviz::AddMapvizDisplayRequest_<ContainerAllocator1> & lhs, const ::mapviz::AddMapvizDisplayRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mapviz

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mapviz::AddMapvizDisplayRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mapviz::AddMapvizDisplayRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mapviz::AddMapvizDisplayRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mapviz::AddMapvizDisplayRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mapviz::AddMapvizDisplayRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mapviz::AddMapvizDisplayRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mapviz::AddMapvizDisplayRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d99db34575927545707e7081858716f3";
  }

  static const char* value(const ::mapviz::AddMapvizDisplayRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd99db34575927545ULL;
  static const uint64_t static_value2 = 0x707e7081858716f3ULL;
};

template<class ContainerAllocator>
struct DataType< ::mapviz::AddMapvizDisplayRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mapviz/AddMapvizDisplayRequest";
  }

  static const char* value(const ::mapviz::AddMapvizDisplayRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mapviz::AddMapvizDisplayRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"\n"
"string                        name\n"
"string                        type\n"
"\n"
"int32                         draw_order\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"bool                          visible\n"
"\n"
"marti_common_msgs/KeyValue[]  properties\n"
"\n"
"\n"
"================================================================================\n"
"MSG: marti_common_msgs/KeyValue\n"
"# An arbitrary key-value pair\n"
"\n"
"string key\n"
"string value\n"
;
  }

  static const char* value(const ::mapviz::AddMapvizDisplayRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mapviz::AddMapvizDisplayRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.type);
      stream.next(m.draw_order);
      stream.next(m.visible);
      stream.next(m.properties);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddMapvizDisplayRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mapviz::AddMapvizDisplayRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mapviz::AddMapvizDisplayRequest_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "draw_order: ";
    Printer<int32_t>::stream(s, indent + "  ", v.draw_order);
    s << indent << "visible: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.visible);
    s << indent << "properties[]" << std::endl;
    for (size_t i = 0; i < v.properties.size(); ++i)
    {
      s << indent << "  properties[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::marti_common_msgs::KeyValue_<ContainerAllocator> >::stream(s, indent + "    ", v.properties[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAPVIZ_MESSAGE_ADDMAPVIZDISPLAYREQUEST_H
