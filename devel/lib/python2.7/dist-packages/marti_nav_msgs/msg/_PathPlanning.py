# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from marti_nav_msgs/PathPlanning.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class PathPlanning(genpy.Message):
  _md5sum = "275fd723a6af7fd7f102a3f07eca0829"
  _type = "marti_nav_msgs/PathPlanning"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

int32   segment_type    # Type of path segment
float32 length          # Length of path segment
float32 start_speed     # Desired speed at start of path segment
float32 end_speed       # Desired speed at end of path segment
float32 startx          # Starting x-coordinate of the vehicle
float32 starty          # Starting y-coordinate of the vehicle
float32 endx            # Ending x-coordinate of the vehicle
float32 endy            # Ending y-coordinate of the vehicle
float32 theta0          # theta0 (constant) parameter for initial heading
float32 a1              # a1 (linear) parameter for the x-y track
float32 a2              # a2 (quadratric) parameter for the x-y track
float32 k0              # k0 (constant) parameter for the curvature
float32 c1              # c1 (linear) parameter for the curvature
float32 c2              # c2 (quadratic) parameter for the curvature
int32 behavior          # Type of behavior for the segment
int32 creep             # Whether we should be in creep mode of not (0-No, 1-Yes)
int32 acc               # Whether ACC Override is on (0-Normal ACC, 1-Override ACC)
int32 reverse           # Whether we should be in reverse or not (0-No, 1-Yes)
int32 vehicle_track     # Whether we are tracking a vehicle (0-No, 1-Yes)

# The following items are used in Intelligence, but won't be transmitted with
# the segments to C&C

bool transmitted        # Flag to indicate whether the path segment has been
                        # transmitted

bool auxTransmitted

float32 theta_end       # End heading (provided explicitly)
float32 k_end           # End curvature
int32 seg_len           # Number of route points used to calculate the segment
float32 speed_limit     # Minimum speed of route points used (comes from MDF or -1)

# Other variables
float32 max_error
float32 max_smooth
float32 max_curv
int32 possible_points
bool bExitSegment

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','segment_type','length','start_speed','end_speed','startx','starty','endx','endy','theta0','a1','a2','k0','c1','c2','behavior','creep','acc','reverse','vehicle_track','transmitted','auxTransmitted','theta_end','k_end','seg_len','speed_limit','max_error','max_smooth','max_curv','possible_points','bExitSegment']
  _slot_types = ['std_msgs/Header','int32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int32','int32','int32','int32','int32','bool','bool','float32','float32','int32','float32','float32','float32','float32','int32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,segment_type,length,start_speed,end_speed,startx,starty,endx,endy,theta0,a1,a2,k0,c1,c2,behavior,creep,acc,reverse,vehicle_track,transmitted,auxTransmitted,theta_end,k_end,seg_len,speed_limit,max_error,max_smooth,max_curv,possible_points,bExitSegment

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PathPlanning, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.segment_type is None:
        self.segment_type = 0
      if self.length is None:
        self.length = 0.
      if self.start_speed is None:
        self.start_speed = 0.
      if self.end_speed is None:
        self.end_speed = 0.
      if self.startx is None:
        self.startx = 0.
      if self.starty is None:
        self.starty = 0.
      if self.endx is None:
        self.endx = 0.
      if self.endy is None:
        self.endy = 0.
      if self.theta0 is None:
        self.theta0 = 0.
      if self.a1 is None:
        self.a1 = 0.
      if self.a2 is None:
        self.a2 = 0.
      if self.k0 is None:
        self.k0 = 0.
      if self.c1 is None:
        self.c1 = 0.
      if self.c2 is None:
        self.c2 = 0.
      if self.behavior is None:
        self.behavior = 0
      if self.creep is None:
        self.creep = 0
      if self.acc is None:
        self.acc = 0
      if self.reverse is None:
        self.reverse = 0
      if self.vehicle_track is None:
        self.vehicle_track = 0
      if self.transmitted is None:
        self.transmitted = False
      if self.auxTransmitted is None:
        self.auxTransmitted = False
      if self.theta_end is None:
        self.theta_end = 0.
      if self.k_end is None:
        self.k_end = 0.
      if self.seg_len is None:
        self.seg_len = 0
      if self.speed_limit is None:
        self.speed_limit = 0.
      if self.max_error is None:
        self.max_error = 0.
      if self.max_smooth is None:
        self.max_smooth = 0.
      if self.max_curv is None:
        self.max_curv = 0.
      if self.possible_points is None:
        self.possible_points = 0
      if self.bExitSegment is None:
        self.bExitSegment = False
    else:
      self.header = std_msgs.msg.Header()
      self.segment_type = 0
      self.length = 0.
      self.start_speed = 0.
      self.end_speed = 0.
      self.startx = 0.
      self.starty = 0.
      self.endx = 0.
      self.endy = 0.
      self.theta0 = 0.
      self.a1 = 0.
      self.a2 = 0.
      self.k0 = 0.
      self.c1 = 0.
      self.c2 = 0.
      self.behavior = 0
      self.creep = 0
      self.acc = 0
      self.reverse = 0
      self.vehicle_track = 0
      self.transmitted = False
      self.auxTransmitted = False
      self.theta_end = 0.
      self.k_end = 0.
      self.seg_len = 0
      self.speed_limit = 0.
      self.max_error = 0.
      self.max_smooth = 0.
      self.max_curv = 0.
      self.possible_points = 0
      self.bExitSegment = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i13f5i2B2fi4fiB().pack(_x.segment_type, _x.length, _x.start_speed, _x.end_speed, _x.startx, _x.starty, _x.endx, _x.endy, _x.theta0, _x.a1, _x.a2, _x.k0, _x.c1, _x.c2, _x.behavior, _x.creep, _x.acc, _x.reverse, _x.vehicle_track, _x.transmitted, _x.auxTransmitted, _x.theta_end, _x.k_end, _x.seg_len, _x.speed_limit, _x.max_error, _x.max_smooth, _x.max_curv, _x.possible_points, _x.bExitSegment))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 111
      (_x.segment_type, _x.length, _x.start_speed, _x.end_speed, _x.startx, _x.starty, _x.endx, _x.endy, _x.theta0, _x.a1, _x.a2, _x.k0, _x.c1, _x.c2, _x.behavior, _x.creep, _x.acc, _x.reverse, _x.vehicle_track, _x.transmitted, _x.auxTransmitted, _x.theta_end, _x.k_end, _x.seg_len, _x.speed_limit, _x.max_error, _x.max_smooth, _x.max_curv, _x.possible_points, _x.bExitSegment,) = _get_struct_i13f5i2B2fi4fiB().unpack(str[start:end])
      self.transmitted = bool(self.transmitted)
      self.auxTransmitted = bool(self.auxTransmitted)
      self.bExitSegment = bool(self.bExitSegment)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i13f5i2B2fi4fiB().pack(_x.segment_type, _x.length, _x.start_speed, _x.end_speed, _x.startx, _x.starty, _x.endx, _x.endy, _x.theta0, _x.a1, _x.a2, _x.k0, _x.c1, _x.c2, _x.behavior, _x.creep, _x.acc, _x.reverse, _x.vehicle_track, _x.transmitted, _x.auxTransmitted, _x.theta_end, _x.k_end, _x.seg_len, _x.speed_limit, _x.max_error, _x.max_smooth, _x.max_curv, _x.possible_points, _x.bExitSegment))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 111
      (_x.segment_type, _x.length, _x.start_speed, _x.end_speed, _x.startx, _x.starty, _x.endx, _x.endy, _x.theta0, _x.a1, _x.a2, _x.k0, _x.c1, _x.c2, _x.behavior, _x.creep, _x.acc, _x.reverse, _x.vehicle_track, _x.transmitted, _x.auxTransmitted, _x.theta_end, _x.k_end, _x.seg_len, _x.speed_limit, _x.max_error, _x.max_smooth, _x.max_curv, _x.possible_points, _x.bExitSegment,) = _get_struct_i13f5i2B2fi4fiB().unpack(str[start:end])
      self.transmitted = bool(self.transmitted)
      self.auxTransmitted = bool(self.auxTransmitted)
      self.bExitSegment = bool(self.bExitSegment)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_i13f5i2B2fi4fiB = None
def _get_struct_i13f5i2B2fi4fiB():
    global _struct_i13f5i2B2fi4fiB
    if _struct_i13f5i2B2fi4fiB is None:
        _struct_i13f5i2B2fi4fiB = struct.Struct("<i13f5i2B2fi4fiB")
    return _struct_i13f5i2B2fi4fiB
