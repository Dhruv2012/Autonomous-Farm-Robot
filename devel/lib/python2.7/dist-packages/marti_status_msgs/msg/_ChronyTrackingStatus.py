# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from marti_status_msgs/ChronyTrackingStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ChronyTrackingStatus(genpy.Message):
  _md5sum = "8d4e25c769e04f542a792f47f82c3ccd"
  _type = "marti_status_msgs/ChronyTrackingStatus"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

string reference
int32 stratum
float64 system_time_offset
float64 last_offset 
float64 rms_offset
float32 frequency_offset
float32 residual_frequency
float32 skew
float64 root_delay
float64 root_dispersion
float32 update_interval

string leap_status

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','reference','stratum','system_time_offset','last_offset','rms_offset','frequency_offset','residual_frequency','skew','root_delay','root_dispersion','update_interval','leap_status']
  _slot_types = ['std_msgs/Header','string','int32','float64','float64','float64','float32','float32','float32','float64','float64','float32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,reference,stratum,system_time_offset,last_offset,rms_offset,frequency_offset,residual_frequency,skew,root_delay,root_dispersion,update_interval,leap_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ChronyTrackingStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.reference is None:
        self.reference = ''
      if self.stratum is None:
        self.stratum = 0
      if self.system_time_offset is None:
        self.system_time_offset = 0.
      if self.last_offset is None:
        self.last_offset = 0.
      if self.rms_offset is None:
        self.rms_offset = 0.
      if self.frequency_offset is None:
        self.frequency_offset = 0.
      if self.residual_frequency is None:
        self.residual_frequency = 0.
      if self.skew is None:
        self.skew = 0.
      if self.root_delay is None:
        self.root_delay = 0.
      if self.root_dispersion is None:
        self.root_dispersion = 0.
      if self.update_interval is None:
        self.update_interval = 0.
      if self.leap_status is None:
        self.leap_status = ''
    else:
      self.header = std_msgs.msg.Header()
      self.reference = ''
      self.stratum = 0
      self.system_time_offset = 0.
      self.last_offset = 0.
      self.rms_offset = 0.
      self.frequency_offset = 0.
      self.residual_frequency = 0.
      self.skew = 0.
      self.root_delay = 0.
      self.root_dispersion = 0.
      self.update_interval = 0.
      self.leap_status = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.reference
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i3d3f2df().pack(_x.stratum, _x.system_time_offset, _x.last_offset, _x.rms_offset, _x.frequency_offset, _x.residual_frequency, _x.skew, _x.root_delay, _x.root_dispersion, _x.update_interval))
      _x = self.leap_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reference = str[start:end].decode('utf-8')
      else:
        self.reference = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.stratum, _x.system_time_offset, _x.last_offset, _x.rms_offset, _x.frequency_offset, _x.residual_frequency, _x.skew, _x.root_delay, _x.root_dispersion, _x.update_interval,) = _get_struct_i3d3f2df().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.leap_status = str[start:end].decode('utf-8')
      else:
        self.leap_status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.reference
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i3d3f2df().pack(_x.stratum, _x.system_time_offset, _x.last_offset, _x.rms_offset, _x.frequency_offset, _x.residual_frequency, _x.skew, _x.root_delay, _x.root_dispersion, _x.update_interval))
      _x = self.leap_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reference = str[start:end].decode('utf-8')
      else:
        self.reference = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.stratum, _x.system_time_offset, _x.last_offset, _x.rms_offset, _x.frequency_offset, _x.residual_frequency, _x.skew, _x.root_delay, _x.root_dispersion, _x.update_interval,) = _get_struct_i3d3f2df().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.leap_status = str[start:end].decode('utf-8')
      else:
        self.leap_status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i3d3f2df = None
def _get_struct_i3d3f2df():
    global _struct_i3d3f2df
    if _struct_i3d3f2df is None:
        _struct_i3d3f2df = struct.Struct("<i3d3f2df")
    return _struct_i3d3f2df
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
