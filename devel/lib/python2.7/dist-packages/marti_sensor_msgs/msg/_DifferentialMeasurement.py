# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from marti_sensor_msgs/DifferentialMeasurement.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class DifferentialMeasurement(genpy.Message):
  _md5sum = "4e59a00b1eeea864eec73f05dd359752"
  _type = "marti_sensor_msgs/DifferentialMeasurement"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# A differential measurement between two places in the world
#  Usually used with RTK-gps setups

Header  header           # The time and location where this measurement is taken from
string  base_frame_id    # The location we are measuring relative to

float64 baseline_length  # Distance in meters between the two locations
float64 baseline_length_variance # set > 1e14 to mark as invalid
float64 heading          # Heading in degrees of the relative position vector
float64 heading_variance # set > 1e14 to mark as invalid
float64 pitch            # Pitch in degrees of the relative position vector
float64 pitch_variance   # set > 1e14 to mark as invalid
float64 roll             # Roll in degrees of the relative position vector
float64 roll_variance    # set > 1e14 to mark as invalid

geometry_msgs/Vector3 position  # position measurement between this point and our reference location
                                # coordinates are given in ENU meters
float64[9] position_covariance  # Covariance for the position measurement
                       # set > 1e14 to mark as invalid

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','base_frame_id','baseline_length','baseline_length_variance','heading','heading_variance','pitch','pitch_variance','roll','roll_variance','position','position_covariance']
  _slot_types = ['std_msgs/Header','string','float64','float64','float64','float64','float64','float64','float64','float64','geometry_msgs/Vector3','float64[9]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,base_frame_id,baseline_length,baseline_length_variance,heading,heading_variance,pitch,pitch_variance,roll,roll_variance,position,position_covariance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DifferentialMeasurement, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.base_frame_id is None:
        self.base_frame_id = ''
      if self.baseline_length is None:
        self.baseline_length = 0.
      if self.baseline_length_variance is None:
        self.baseline_length_variance = 0.
      if self.heading is None:
        self.heading = 0.
      if self.heading_variance is None:
        self.heading_variance = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.pitch_variance is None:
        self.pitch_variance = 0.
      if self.roll is None:
        self.roll = 0.
      if self.roll_variance is None:
        self.roll_variance = 0.
      if self.position is None:
        self.position = geometry_msgs.msg.Vector3()
      if self.position_covariance is None:
        self.position_covariance = [0.] * 9
    else:
      self.header = std_msgs.msg.Header()
      self.base_frame_id = ''
      self.baseline_length = 0.
      self.baseline_length_variance = 0.
      self.heading = 0.
      self.heading_variance = 0.
      self.pitch = 0.
      self.pitch_variance = 0.
      self.roll = 0.
      self.roll_variance = 0.
      self.position = geometry_msgs.msg.Vector3()
      self.position_covariance = [0.] * 9

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.base_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_11d().pack(_x.baseline_length, _x.baseline_length_variance, _x.heading, _x.heading_variance, _x.pitch, _x.pitch_variance, _x.roll, _x.roll_variance, _x.position.x, _x.position.y, _x.position.z))
      buff.write(_get_struct_9d().pack(*self.position_covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_frame_id = str[start:end].decode('utf-8')
      else:
        self.base_frame_id = str[start:end]
      _x = self
      start = end
      end += 88
      (_x.baseline_length, _x.baseline_length_variance, _x.heading, _x.heading_variance, _x.pitch, _x.pitch_variance, _x.roll, _x.roll_variance, _x.position.x, _x.position.y, _x.position.z,) = _get_struct_11d().unpack(str[start:end])
      start = end
      end += 72
      self.position_covariance = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.base_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_11d().pack(_x.baseline_length, _x.baseline_length_variance, _x.heading, _x.heading_variance, _x.pitch, _x.pitch_variance, _x.roll, _x.roll_variance, _x.position.x, _x.position.y, _x.position.z))
      buff.write(self.position_covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_frame_id = str[start:end].decode('utf-8')
      else:
        self.base_frame_id = str[start:end]
      _x = self
      start = end
      end += 88
      (_x.baseline_length, _x.baseline_length_variance, _x.heading, _x.heading_variance, _x.pitch, _x.pitch_variance, _x.roll, _x.roll_variance, _x.position.x, _x.position.y, _x.position.z,) = _get_struct_11d().unpack(str[start:end])
      start = end
      end += 72
      self.position_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11d = None
def _get_struct_11d():
    global _struct_11d
    if _struct_11d is None:
        _struct_11d = struct.Struct("<11d")
    return _struct_11d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
